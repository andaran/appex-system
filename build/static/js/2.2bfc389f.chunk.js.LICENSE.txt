/*
    object-assign
    (c) Sindre Sorhus
    @license MIT
    */

/*
object-assign
(c) Sindre Sorhus
@license MIT
*/

/* @preserve
       * The MIT License (MIT)
       * 
       * Copyright (c) 2013-2017 Petka Antonov
       * 
       * Permission is hereby granted, free of charge, to any person obtaining a copy
       * of this software and associated documentation files (the "Software"), to deal
       * in the Software without restriction, including without limitation the rights
       * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
       * copies of the Software, and to permit persons to whom the Software is
       * furnished to do so, subject to the following conditions:
       * 
       * The above copyright notice and this permission notice shall be included in
       * all copies or substantial portions of the Software.
       * 
       * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
       * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
       * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.  IN NO EVENT SHALL THE
       * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
       * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
       * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
       * THE SOFTWARE.
       * 
       */

/*!
               * Handle async validators
               */

/*!
               * ignore
               */

/*!
             * Ensure `name` and `message` show up in toJSON output re: gh-9296
             */

/*!
             * ignore
             * @param {Readonly<CastError>} other
             */

/*!
             * ignore
             */

/*!
             * inspect helper
             */

/*!
            * add message
            */

/*!
           * Checks for indexes added to subdocs using Schema.index().
           * These indexes need their paths prefixed properly.
           *
           * schema._indexes = [ [indexObj, options], [indexObj, options] ..]
           */

/*!
           * Recursively set nested arrays
           */

/*!
           * ignore
           */

/*!
         * Applies schema type transforms to `json`.
         *
         * @param {Document} self
         * @param {Object} json
         * @return {Object} `json`
         */

/*!
         * DivergentArrayError constructor.
         * @param {Array<String>} paths
         */

/*!
         * If populating a path within a document array, make sure each
         * subdoc within the array knows its subpaths are populated.
         *
         * ####Example:
         *     const doc = await Article.findOne().populate('comments.author');
         *     doc.comments[0].populated('author'); // Should be set
         */

/*!
         * Init helper.
         *
         * @param {Object} self document instance
         * @param {Object} obj raw mongodb doc
         * @param {Object} doc object we are initializing
         * @api private
         */

/*!
         * Minimizes an object, removing undefined values and empty objects
         *
         * @param {Object} object to minimize
         * @return {Object}
         */

/*!
         * MissingSchema Error constructor.
         * @param {String} name
         */

/*!
         * OverwriteModel Error constructor.
         * @param {String} name
         */

/*!
         * OverwriteModel Error constructor.
         */

/*!
         * Registers remove event listeners for triggering
         * on subdocuments.
         *
         * @param {EmbeddedDocument} sub
         * @api private
         */

/*!
         * ignore
         */

/*!
         * toString helper
         * TODO remove? This defaults to `${this.name}: ${this.message}`
         */

/*!
        * Avoid Node deprecation warning DEP0079
        */

/*!
       * Applies setters without casting
       *
       * @api private
       */

/*!
       * Applies virtuals properties to `json`.
       *
       * @param {Document} self
       * @param {Object} json
       * @return {Object} `json`
       */

/*!
       * Applies virtuals properties to `json`.
       */

/*!
       * Centralize this so we can more easily work around issues with people
       * stubbing out `process.nextTick()` in tests using sinon:
       * https://github.com/sinonjs/lolex#automatically-incrementing-mocked-time
       * See gh-6074
       */

/*!
       * Converts to POJO when you use the document for querying
       */

/*!
       * Create virtual properties with alias field
       */

/*!
       * Determines if `arg` is an object.
       *
       * @param {Object|Array|String|Function|RegExp|any} arg
       * @api private
       * @return {Boolean}
       */

/*!
       * Document exposes the NodeJS event emitter API, so you can use
       * `on`, `once`, etc.
       */

/*!
       * If this is a document array, each element may contain single
       * populated paths, so we need to modify the top-level document's
       * populated cache. See gh-8247, gh-8265.
       */

/*!
       * Inherit from EventEmitter.
       */

/*!
       * Inherits from SchemaType.
       */

/*!
       * Internal switch for runSetters
       *
       * @api private
       */

/*!
       * Just like handleArray, except also allows `[]` because surprisingly
       * `$in: [1, []]` works fine
       */

/*!
       * Module dependencies.
       */

/*!
       * Module exports.
       */

/*!
       * Module requirements.
       */

/*!
       * Registers remove event listeners for triggering
       * on subdocuments.
       *
       * @param {Subdocument} sub
       * @api private
       */

/*!
       * Runs queued functions
       */

/*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
       * @license  MIT
       */

/*!
       * The buffer module from node.js, for the browser.
       *
       * @author   Feross Aboukhadijeh <http://feross.org>
       * @license  MIT
       */

/*!
       * The class that Mongoose uses internally to instantiate this SchemaType's `options` property.
       */

/*!
       * Use native promises by default
       */

/*!
       * Wraps `castForQuery` to handle context
       */

/*!
       * ignore
       */

/*!
       * ignore. Deprecated re: #6405
       */

/*!
      * Avoid Node deprecation warning DEP0079
      */

/*!
     * @ignore
     */

/*!
     * @see exports.options
     */

/*!
     * A faster Array.prototype.slice.call(arguments) alternative
     * @api private
     */

/*!
     * Applies toObject recursively.
     *
     * @param {Document|Array|Object} obj
     * @return {Object}
     * @api private
     */

/*!
     * Apply query middleware
     *
     * @param {Query} query constructor
     * @param {Model} model
     */

/*!
     * Browser doc exposes the event emitter API
     */

/*!
     * Casts val to an object suitable for `$text`. Throws an error if the object
     * can't be casted.
     *
     * @param {Any} val value to cast
     * @param {String} [path] path to associate with any errors that occured
     * @return {Object} casted object
     * @see https://docs.mongodb.com/manual/reference/operator/query/text/
     * @api private
     */

/*!
     * Checks to see if at least one path is in the states passed in via `arguments`
     * e.g., this.some('required', 'inited')
     *
     * @param {String} state that we want to check for.
     * @private
     */

/*!
     * Compile other Buffer methods marking this buffer as modified.
     */

/*!
     * Compiles schemas.
     */

/*!
     * Converts `expires` options of index objects to `expiresAfterSeconds` options for MongoDB.
     *
     * @param {Object} object
     * @api private
     */

/*!
     * Date Query casting.
     *
     * @api private
     */

/*!
     * Decorate buffers
     */

/*!
     * Defines the accessor named prop on the incoming prototype.
     */

/*!
     * Dependencies
     */

/*!
     * Determine if `val` is null or undefined
     *
     * @return {Boolean}
     */

/*!
     * Determines if `a` and `b` are deep equal.
     *
     * Modified from node/lib/assert.js
     *
     * @param {any} a a value to compare to `b`
     * @param {any} b a value to compare to `a`
     * @return {Boolean}
     * @api private
     */

/*!
     * Determines if `arg` is a plain old JavaScript object (POJO). Specifically,
     * `arg` must be an object but not an instance of any special class, like String,
     * ObjectId, etc.
     *
     * `Object.getPrototypeOf()` is part of ES5: https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf
     *
     * @param {Object|Array|String|Function|RegExp|any} arg
     * @api private
     * @return {Boolean}
     */

/*!
     * Determines if `obj` is a built-in object like an array, date, boolean,
     * etc.
     */

/*!
     * Determines if `val` is an object that has no own keys
     */

/*!
     * Determines if two buffers are equal.
     *
     * @param {Buffer} a
     * @param {Object} b
     */

/*!
     * Exports.
     */

/*!
     * Find the correct constructor, taking into account discriminators
     */

/*!
     * Flattens an array.
     *
     * [ 1, [ 2, 3, [4] ]] -> [1,2,3,4]
     *
     * @param {Array} arr
     * @param {Function} [filter] If passed, will be invoked with each item in the array. If `filter` returns a falsy value, the item will not be included in the results.
     * @return {Array}
     * @private
     */

/*!
     * Formats error messages
     */

/*!
     * Gather all indexes defined in the schema, including single nested,
     * document arrays, and embedded discriminators.
     */

/*!
     * Generates a random string
     *
     * @api private
     */

/*!
     * Get the bson type, if it exists
     */

/*!
     * Get the last element of an array
     */

/*!
     * Getter for convenience with populate, see gh-6115
     */

/*!
     * Given a value, cast it to a boolean, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {Boolean|null|undefined}
     * @throws {CastError} if `value` is not one of the allowed values
     * @api private
     */

/*!
     * Given a value, cast it to a number, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {Boolean|null|undefined}
     * @throws {Error} if `value` is not one of the allowed values
     * @api private
     */

/*!
     * Given a value, cast it to a string, or throw a `CastError` if the value
     * cannot be casted. `null` and `undefined` are considered valid.
     *
     * @param {Any} value
     * @param {String} [path] optional the path to set on the CastError
     * @return {string|null|undefined}
     * @throws {CastError}
     * @api private
     */

/*!
     * Handle the `WriteOpResult` from the server
     */

/*!
     * Helper for JSON.stringify
     * Ensure `name` and `message` show up in toJSON output re: gh-9847
     */

/*!
     * If the document is a mapped discriminator type, it returns a model instance for that type, otherwise,
     * it returns an instance of the given model.
     *
     * @param {Model}  model
     * @param {Object} doc
     * @param {Object} fields
     *
     * @return {Document}
     */

/*!
     * Ignore
     */

/*!
     * Inherit from Buffer.
     */

/*!
     * Inherit from Document
     */

/*!
     * Inherit from the NodeJS document
     */

/*!
     * Inherits from ArrayType.
     */

/*!
     * Inherits from SchemaType.
     */

/*!
     * Internal helper for update, updateMany, updateOne
     */

/*!
     * Iterates over the paths that belong to one of the parameter states.
     *
     * The function profile can look like:
     * this.forEach(state1, fn);         // iterates over all paths in state1
     * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
     * this.forEach(fn);                 // iterates over all paths in all states
     *
     * @param {String} [state]
     * @param {String} [state]
     * @param {Function} callback
     * @private
     */

/*!
     * Like `schema.path()`, except with a document, because impossible to
     * determine path type without knowing the embedded discriminator key.
     */

/*!
     * Maps over the paths that belong to one of the parameter states.
     *
     * The function profile can look like:
     * this.forEach(state1, fn);         // iterates over all paths in state1
     * this.forEach(state1, state2, fn); // iterates over all paths in state1 or state2
     * this.forEach(fn);                 // iterates over all paths in all states
     *
     * @param {String} [state]
     * @param {String} [state]
     * @param {Function} callback
     * @return {Array}
     * @private
     */

/*!
     * Merges `from` into `to` without overwriting existing properties.
     *
     * @param {Object} to
     * @param {Object} from
     * @api private
     */

/*!
     * Module dependencies
     */

/*!
     * Module dependencies.
     */

/*!
     * Module exports
     */

/*!
     * Module exports.
     */

/*!
     * Module requirements
     */

/*!
     * Module requirements.
     */

/*!
     * Object clone with Mongoose natives support.
     *
     * If options.minimize is true, creates a minimal data object. Empty objects and undefined values will not be cloned. This makes the data payload sent to MongoDB as small as possible.
     *
     * Functions are never cloned.
     *
     * @param {Object} obj the object to clone
     * @param {Object} options
     * @param {Boolean} isArrayChild true if cloning immediately underneath an array. Special case for minimize.
     * @return {Object} the cloned object
     * @api private
     */

/*!
     * Permissions
     */

/*!
     * Prepare a set of path options for query population.
     *
     * @param {Query} query
     * @param {Object} options
     * @return {Array}
     */

/*!
     * Prepare a set of path options for query population. This is the MongooseQuery
     * version
     *
     * @param {Query} query
     * @param {Object} options
     * @return {Array}
     */

/*!
     * Produces a collection name from model `name`. By default, just returns
     * the model name
     *
     * @param {String} name a model name
     * @param {Function} pluralize function that pluralizes the collection name
     * @return {String} a collection name
     * @api private
     */

/*!
     * Register hooks for this model
     *
     * @param {Model} model
     * @param {Schema} schema
     */

/*!
     * Removes duplicate values from an array
     *
     * [1, 2, 3, 3, 5] => [1, 2, 3, 5]
     * [ ObjectId("550988ba0c19d57f697dc45e"), ObjectId("550988ba0c19d57f697dc45e") ]
     *    => [ObjectId("550988ba0c19d57f697dc45e")]
     *
     * @param {Array} arr
     * @return {Array}
     * @private
     */

/*!
     * Return the value of `obj` at the given `path`.
     *
     * @param {String} path
     * @param {Object} obj
     */

/*!
     * Returns an array of values from object `o`.
     *
     * @param {Object} o
     * @return {Array}
     * @private
     */

/*!
     * Returns if `v` is a mongoose object that has a `toObject()` method we can use.
     *
     * This is for compatibility with libs like Date.js which do foolish things to Natives.
     *
     * @param {any} v
     * @api private
     */

/*!
     * Returns the value passed to it.
     */

/*!
     * Returns this documents _id cast to a string.
     */

/*!
     * Returns true if `v` is an object that can be serialized as a primitive in
     * MongoDB
     */

/*!
     * Safer helper for hasOwnProperty checks
     *
     * @param {Object} obj
     * @param {String} prop
     */

/*!
     * Scopes paths selected in a query to this array.
     * Necessary for proper default application of subdocument values.
     *
     * @param {DocumentArrayPath} array - the array to scope `fields` paths
     * @param {Object|undefined} fields - the root fields selected in the query
     * @param {Boolean|undefined} init - if we are being created part of a query result
     */

/*!
     * Search if `obj` or any POJOs nested underneath `obj` has a property named
     * `key`
     */

/*!
     * Set each path query option to lean
     *
     * @param {Object} option
     */

/*!
     * Sets the value of `obj` at the given `path`.
     *
     * @param {String} path
     * @param {Anything} val
     * @param {Object} obj
     */

/*!
     * Shallow copies defaults into options.
     *
     * @param {Object} defaults
     * @param {Object} options
     * @return {Object} the merged object
     * @api private
     */

/*!
     * Simplified lodash.get to work around the annoying null quirk. See:
     * https://github.com/lodash/lodash/issues/3659
     */

/*!
     * Since maps are stored as objects under the hood, keys must be strings
     * and can't contain any invalid characters
     */

/*!
     * Special case for when users use a common location schema to represent
     * locations for use with $geoWithin.
     * https://docs.mongodb.org/manual/reference/operator/query/geoWithin/
     *
     * @param {Object} val
     * @api private
     */

/*!
     * StateMachine represents a minimal `interface` for the
     * constructors it builds via StateMachine.ctor(...).
     *
     * @api private
     */

/*!
     * StateMachine.ctor('state1', 'state2', ...)
     * A factory method for subclassing StateMachine.
     * The arguments are a list of states. For each state,
     * the constructor's prototype gets state transition
     * methods named after each state. These transition methods
     * place their path argument into the given state.
     *
     * @param {String} state
     * @param {String} [state]
     * @return {Function} subclass constructor
     * @private
     */

/*!
     * The object used to define this validator. Not enumerable to hide
     * it from `require('util').inspect()` output re: gh-3925
     */

/*!
     * This function builds the functions that get assigned to `forEach` and `map`,
     * since both of those methods share a lot of the same logic.
     *
     * @param {String} iterMethod is either 'forEach' or 'map'
     * @return {Function}
     * @api private
     */

/*!
     * This function is wrapped by the state change functions:
     *
     * - `require(path)`
     * - `modify(path)`
     * - `init(path)`
     *
     * @api private
     */

/*!
     * [node-mongodb-native](https://github.com/mongodb/node-mongodb-native) ObjectId
     * @constructor NodeMongoDbObjectId
     * @see ObjectId
     */

/*!
     * exports
     */

/*!
     * gt, gte, lt, lte, ne, in, nin, all, regex, size, maxDistance
     *
     *     Thing.where('type').nin(array)
     */

/*!
     * ignore
     */

/*!
     * limit, skip, maxScan, batchSize, comment
     *
     * Sets these associated options.
     *
     *     query.comment('feed query');
     */

/*!
     * no-op for hooks
     */

/*!
     * populate helper
     */

/*!
     * process.nextTick helper.
     *
     * Wraps `callback` in a try/catch + nextTick.
     *
     * node-mongodb-native has a habit of state corruption when an error is immediately thrown from within a collection callback.
     *
     * @param {Function} callback
     * @api private
     */

/*!
    * returns discriminator by discriminatorMapping.value
    *
    * @param {Model} model
    * @param {string} value
    */

/*!
    * returns discriminator by discriminatorMapping.value
    *
    * @param {Schema} schema
    * @param {string} value
    */

/*!
 * Font Awesome Free 5.15.3 by @fontawesome - https://fontawesome.com
 * License - https://fontawesome.com/license/free (Icons: CC BY 4.0, Fonts: SIL OFL 1.1, Code: MIT License)
 */

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <http://feross.org>
 * @license  MIT
 */

/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */

/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */

/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */

/** @license React v0.20.2
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react-jsx-runtime.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/** @license React v17.0.2
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */
